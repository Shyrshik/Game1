public class NeedToDo
{
    // проплывание тени от облаков
    // смена времени суток возможно времен года
    // дороги при ходьбе по которым все передвигаются быстрее (штрафы передвижения по определенным titles)
    // разные виды почв которые замедляют персонажа
    // болото
    // трехмерный мир, возможно реализовать слоями - отдельный tilemap на этаж
    // враги, кладбища на которых спавняться скелеты, зомби
    //(готово) создаем площадку 3х3 вокруг персонажа, может там что то будем ложить при старте игры
    //(готово) мини карта
    // зацикленный мир, имитация что персонаж ходит по шару на плоскости
    // урон снарядов зависит от высоты, сверху вниз увеличивается , наоборот уменьшается

    // прокачка с помощью карт типа magic, которые изменяют характеристики персонажа
    // сборные предметы (как в доте).
    // управление меню с джойстика.
    // переназначение клавиш в меню
    // тени от объектов и персонажей, чтоб по ним можно было ориентироваться.
    //(готово) отобразить здоровья с помощью подписки на событие
    //(готово) откорректировать движение камеры, после перехода на _rigidBody.velocity все поломалось.
    // сделать стены которые загараживают игрока прозрачными
    // нужно как то реализовать пошаговую игру в реальном времени, что бы при торможении игра просто замедлялась а не телепортировала все
    //      хуй знает куда.

    //?? Надо добавить икру, Ванька псих сказал



    // ?? Процедурная Анимация??? как в игре Spore
    // ??? Коллапс волновой функции - для генерации мира и текстур.



    /*
     * Vlad Demin, что то про камеру.
     * 
     * Нет, это не инкапсуляция)
     * Камера в твоём случае она должна иметь возможность следить за любым объектом, это полиморфизм.

     * Смотри, задача камеры - следить за некоторым объектом, всё, она не должна знать ни про каких Player, ни про то, что если она 
     * назначена в сама в себя, то она не должна следить ни за чем. Вот это вот инкапсуляция + принцип единственной ответственности.

     * Соответственно, за переключение targets у камеры должен отвечать некий внешний код, в котором эта логика и будет лежать, и она будет
     * понимать как и когда менять targets в камере. И эта же штука будет ответственна за то, чтобы никогда null targets туда не приходил.

     * Например, так же, эту штука может подписываться на событие об уничтожении объекта и в зависимости от этого говорить камере поменять 
     * текущий target.

     * Например, в эту штуку будет прокинут некий дефолтный target, и не надо будет пользоваться Find, потому что он уже будет там. 

     * 
     * 
     * 
     * 
     */
}
